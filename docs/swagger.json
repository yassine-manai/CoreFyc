{
    "swagger": "2.0",
    "info": {
        "title": "Find Your Car",
        "contact": {},
        "version": "0.0.9"
    },
    "paths": {
        "/backoffice/addCamera": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Add a new camera to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Camera"
                ],
                "summary": "Add a new camera",
                "parameters": [
                    {
                        "description": "Camera data",
                        "name": "Camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Camera created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    }
                }
            }
        },
        "/backoffice/addClient": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Add a new client credential to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Clients"
                ],
                "summary": "Add a new client credential",
                "parameters": [
                    {
                        "description": "Client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                }
            }
        },
        "/backoffice/addSign": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Add a new sign to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Signs"
                ],
                "summary": "Add a new sign",
                "parameters": [
                    {
                        "description": "sign data",
                        "name": "sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddSignModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "sign created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.AddSignModel"
                        }
                    }
                }
            }
        },
        "/backoffice/add_zone": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Add a new zone to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Zone"
                ],
                "summary": "Add a new zone",
                "parameters": [
                    {
                        "description": "Zone data",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddZoneModel"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/debug": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackOffice - Debug"
                ],
                "summary": "Debug BackOffice API",
                "responses": {}
            }
        },
        "/backoffice/deleteCameras": {
            "delete": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Delete a camera by setting the is_deleted flag to true",
                "tags": [
                    "Backoffice - Camera"
                ],
                "summary": "Delete a camera",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "camera_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/deleteClient": {
            "delete": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Delete a client credential by ID",
                "tags": [
                    "Backoffice - Clients"
                ],
                "summary": "Delete a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client API deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backoffice/deleteSign": {
            "delete": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Soft delete a sign by setting the is_deleted flag to true",
                "tags": [
                    "Backoffice - Signs"
                ],
                "summary": "Soft delete a sign",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "sign_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/delete_zone": {
            "delete": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Delete a zone by ID",
                "tags": [
                    "Backoffice - Zone"
                ],
                "summary": "Delete a zone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "zone_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/export_camera": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Export the Camera data in PDF or Excel format based on the `file_type` query parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf",
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "tags": [
                    "BackOffice - Export"
                ],
                "summary": "Export Camera Data",
                "parameters": [
                    {
                        "enum": [
                            "pdf",
                            "excel"
                        ],
                        "type": "string",
                        "default": "pdf",
                        "description": "The type of the export file",
                        "name": "file_type",
                        "in": "query"
                    },
                    {
                        "description": "The list of camera IDs",
                        "name": "camera_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backoffice/export_cars": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Export the present cars data in PDF or Excel format based on the `file_type` query parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf",
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "tags": [
                    "BackOffice - Export"
                ],
                "summary": "Export Cars Data",
                "parameters": [
                    {
                        "description": "The list of Lincense Plates",
                        "name": "license_plates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "enum": [
                            "pdf",
                            "excel"
                        ],
                        "type": "string",
                        "default": "pdf",
                        "description": "The type of the export file",
                        "name": "file_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backoffice/export_client": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Export the Client data in PDF or Excel format based on the `file_type` query parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf",
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "tags": [
                    "BackOffice - Export"
                ],
                "summary": "Export Client Data",
                "parameters": [
                    {
                        "enum": [
                            "pdf",
                            "excel"
                        ],
                        "type": "string",
                        "default": "pdf",
                        "description": "The type of the export file",
                        "name": "file_type",
                        "in": "query"
                    },
                    {
                        "description": "The list of client IDs",
                        "name": "client_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backoffice/export_sign": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Export the Sign data in PDF or Excel format based on the `file_type` query parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf",
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "tags": [
                    "BackOffice - Export"
                ],
                "summary": "Export Sign Data",
                "parameters": [
                    {
                        "description": "The list of Sign IDs",
                        "name": "sign_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "enum": [
                            "pdf",
                            "excel"
                        ],
                        "type": "string",
                        "default": "pdf",
                        "description": "The type of the export file",
                        "name": "file_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backoffice/export_zone": {
            "post": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Export the zone data in PDF or Excel format based on the `file_type` query parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf",
                    " application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                ],
                "tags": [
                    "BackOffice - Export"
                ],
                "summary": "Export Zone Data",
                "parameters": [
                    {
                        "enum": [
                            "pdf",
                            "excel"
                        ],
                        "type": "string",
                        "default": "pdf",
                        "description": "The type of the export file",
                        "name": "file_type",
                        "in": "query"
                    },
                    {
                        "description": "The list of zone IDs",
                        "name": "zone_ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backoffice/getCameras": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of all cameras or a specific camera",
                "tags": [
                    "Backoffice - Camera"
                ],
                "summary": "Get cameras",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "camera_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'true'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cameras or a single camera",
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    }
                }
            }
        },
        "/backoffice/getSettings": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Settings"
                ],
                "summary": "Get settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Settings"
                        }
                    }
                }
            }
        },
        "/backoffice/getSign": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of signs or a specific sign by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Signs"
                ],
                "summary": "Get signs or a specific sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "sign_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of signs or a single sign",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    }
                }
            }
        },
        "/backoffice/get_clients": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of all Clients",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Clients"
                ],
                "summary": "Get all Clients",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ClientID",
                        "name": "clientId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Clients",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ApiKey"
                            }
                        }
                    }
                }
            }
        },
        "/backoffice/get_dashboard_data": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Retrieve dashboard data including total cameras, zones, capacity, free spaces, signs, and present cars.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Dashboard"
                ],
                "summary": "Get Dashboard Data",
                "responses": {}
            }
        },
        "/backoffice/get_present_car": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of all present cars with pagination. If no date is provided, it will return all present cars for the current day.\nDate format must be YYYY-MM-DD.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - PresentCars"
                ],
                "summary": "Get all present cars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include StartDate in the format YYYY-MM-DD",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include EndDate in the format YYYY-MM-DD",
                        "name": "end",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Zone ID",
                        "name": "zoneID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "License Plate",
                        "name": "licensePlate",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Fuzzy Logic",
                        "name": "fuzzy_logic",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "items_per_page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all",
                            "yes",
                            "no"
                        ],
                        "type": "string",
                        "default": "all",
                        "description": "Present Car in Parking",
                        "name": "is_present",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/backoffice.PaginatedResponse"
                        }
                    }
                }
            }
        },
        "/backoffice/get_present_car_id": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of present cars filtered by ID and date range. If no date is provided, it will return all present cars for the current day.\nDate format must be YYYY-MM-DD.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - PresentCars"
                ],
                "summary": "Get present cars by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Transaction ID",
                        "name": "car_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                }
            }
        },
        "/backoffice/get_zones": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of all zones, or a zone by ID if 'zone_id' parameter is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Zone"
                ],
                "summary": "Get all zones or a zone by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include extra information if 'true'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of zones or a single zone",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ZoneDataModel2"
                            }
                        }
                    }
                }
            }
        },
        "/backoffice/get_zones_names": {
            "get": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Get a list of all zones names",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Zone"
                ],
                "summary": "Get all zones Names",
                "responses": {
                    "200": {
                        "description": "List of zones or a single zone",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ZoneNamesModel"
                            }
                        }
                    }
                }
            }
        },
        "/backoffice/login": {
            "post": {
                "description": "Login for users to access the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Login"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/backoffice.User"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/updateCamera": {
            "put": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Update an existing camera by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Camera"
                ],
                "summary": "Update a camera by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "camera_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated camera data",
                        "name": "Camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/updateClient": {
            "put": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Update client credential",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Clients"
                ],
                "summary": "Update client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Client credential data",
                        "name": "Client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                }
            }
        },
        "/backoffice/updateSettings": {
            "put": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Update an existing settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Settings"
                ],
                "summary": "Update settings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "CarPark ID",
                        "name": "carpark_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated settings data",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/backoffice.ResponseData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/backoffice.ResponseData"
                        }
                    }
                }
            }
        },
        "/backoffice/updateSign": {
            "put": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Update an existing sign by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Signs"
                ],
                "summary": "Update a sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "sign_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated sign data",
                        "name": "sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSignModel"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/backoffice/update_zone": {
            "put": {
                "security": [
                    {
                        "BearerAuthBackOffice": []
                    }
                ],
                "description": "Update an existing zone in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backoffice - Zone"
                ],
                "summary": "Update an existing zone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "zone_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated Zone data",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateZoneModel"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/findmycar": {
            "get": {
                "security": [
                    {
                        "BearerAuth3rdParty": []
                    }
                ],
                "description": "Find a car using the license plate number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Third Party"
                ],
                "summary": "Find a car by license plate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "License Plate",
                        "name": "license_plate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "description": "Language",
                        "name": "language",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/third_party.CarLocation"
                        }
                    }
                }
            }
        },
        "/fyc/UserAudit": {
            "get": {
                "description": "Get a list of UserAudit or a specific UserAudit by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Audit"
                ],
                "summary": "Get UserAudit or specific UserAudit by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserAudit ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of UserAudit or a single UserAudit",
                        "schema": {
                            "$ref": "#/definitions/db.UserAudit"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid UserAudit ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No UserAudit found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing UserAudit by ID\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Audit"
                ],
                "summary": "Update a UserAudit by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserAudit ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated UserAudit data",
                        "name": "UserAudit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.UserAudit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserAudit updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "UserAudit not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update UserAudit",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new UserAudit to the database\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Audit"
                ],
                "summary": "Add a new UserAudit",
                "parameters": [
                    {
                        "description": "UserAudit data",
                        "name": "UserAudit",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.UserAudit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "UserAudit created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.UserAudit"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new UserAudit",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a UserAudit by setting the is_deleted flag to true",
                "tags": [
                    "User Audit"
                ],
                "summary": "Soft delete a UserAudit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserAudit ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserAudit deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid UserAudit ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete UserAudit",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/apikey": {
            "get": {
                "description": "Get a Client by ClientID, or all Client",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client API"
                ],
                "summary": "Get a Client by ClientID, or all Client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ClientID",
                        "name": "clientId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of clients or a single client",
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid client ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No Client found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing client credential by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client API"
                ],
                "summary": "Update a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new client credential to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client API"
                ],
                "summary": "Add a new client credential",
                "parameters": [
                    {
                        "description": "Client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.ApiKey"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a client credential by ID",
                "tags": [
                    "Client API"
                ],
                "summary": "Delete a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client credential deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/cameras": {
            "get": {
                "tags": [
                    "Cameras"
                ],
                "summary": "Get camera data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "State of cameras: enabled or deleted",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cameras or a single camera",
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid camera ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No cameras found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing camera by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Update a camera by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated camera data",
                        "name": "Camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Camera updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Camera not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update camera",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new camera to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cameras"
                ],
                "summary": "Add a new camera",
                "parameters": [
                    {
                        "description": "Camera data",
                        "name": "Camera",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Camera created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.Camera"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new camera",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a camera by setting the is_deleted flag to true",
                "tags": [
                    "Cameras"
                ],
                "summary": "Delete a camera",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Camera ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Camera deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid camera ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete camera",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/carDetails": {
            "get": {
                "description": "Get a list of all car details or a specific car detail by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Details"
                ],
                "summary": "Get car details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "CarDetail ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.CarDetail"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing car detail by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Details"
                ],
                "summary": "Update a car detail by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated car detail data",
                        "name": "CarDetail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.CarDetail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.CarDetail"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Car detail not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new car detail to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Car Details"
                ],
                "summary": "Add a new car detail",
                "parameters": [
                    {
                        "description": "Car detail data",
                        "name": "CarDetail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.CarDetail"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.CarDetail"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a car detail by ID",
                "tags": [
                    "Car Details"
                ],
                "summary": "Delete a car detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car detail ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Car detail deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Car detail not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/debug": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Debug"
                ],
                "summary": "Debug API",
                "responses": {}
            }
        },
        "/fyc/errors": {
            "get": {
                "description": "Get a list of all error messages or a specific one by code and language",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Errors"
                ],
                "summary": "Get all error messages or a specific one",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error code to fetch specific error message",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Language of the error message",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ErrorMessage"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing error message by code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Errors"
                ],
                "summary": "Update an existing error message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error message code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated error message object",
                        "name": "errMsg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ErrorMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.ErrorMessage"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new error message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Errors"
                ],
                "summary": "Create a new error message",
                "parameters": [
                    {
                        "description": "Error message object",
                        "name": "errMsg",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ErrorMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.ErrorMessage"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a specific language entry from the messages field of an error message by code",
                "tags": [
                    "Errors"
                ],
                "summary": "Delete a specific language from an error message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Error message code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language of the error message",
                        "name": "lang",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/fyc/history": {
            "get": {
                "description": "Get a list of all history records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get all history records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of history records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.PresentCarHistory"
                            }
                        }
                    },
                    "404": {
                        "description": "No history records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new history record to the database\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Add a new history record",
                "parameters": [
                    {
                        "description": "History record data",
                        "name": "history",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.PresentCarHistory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "History record created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.PresentCarHistory"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new history record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/history/{id}": {
            "put": {
                "description": "Update an existing history record by ID\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Update a history record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "History record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated history record data",
                        "name": "history",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.PresentCarHistory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "History record updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update history record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a history record by ID",
                "tags": [
                    "History"
                ],
                "summary": "Delete a history record by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "History record ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "History record deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete history record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/history/{lpn}": {
            "get": {
                "description": "Get a specific history record by LPN",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get history record by LPN",
                "parameters": [
                    {
                        "type": "string",
                        "description": "History record LPN",
                        "name": "lpn",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PresentCarHistory"
                        }
                    },
                    "400": {
                        "description": "Invalid LPN format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "History record not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/presentcars": {
            "get": {
                "description": "Get a list of all present cars if not date provided it will return all present cars that entered this day",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Get all present cars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "License Plate Number",
                        "name": "lpn",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.PresentCar"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing present car by lpn\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Update a present car by LPN",
                "parameters": [
                    {
                        "type": "string",
                        "default": "A",
                        "description": "string default",
                        "name": "lpn",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated present car data by lpn",
                        "name": "presentCar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new present car to the database\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Add a new present car",
                "parameters": [
                    {
                        "description": "Present Car data",
                        "name": "presentCar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                }
            }
        },
        "/fyc/presentcars/{id}": {
            "put": {
                "description": "Update an existing present car by ID\nDefault Date Format :YYYY-MM-DD HH:mm:ss",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PresentCars"
                ],
                "summary": "Update a present car by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Present Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated present car data",
                        "name": "presentCar",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PresentCar"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a present car by ID",
                "tags": [
                    "PresentCars"
                ],
                "summary": "Delete a present car",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Present Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/settings": {
            "get": {
                "description": "Get settings by CarPark ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Get settings by CarPark ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "CarPark ID",
                        "name": "carpark_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Settings"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing settings by CarPark ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Update settings by CarPark ID",
                "parameters": [
                    {
                        "description": "Updated settings data",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.SettingsNoBind"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.SettingsNoBind"
                        }
                    }
                }
            },
            "post": {
                "description": "Add new settings for a CarPark",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Settings"
                ],
                "summary": "Add new settings",
                "parameters": [
                    {
                        "description": "Settings data",
                        "name": "settings",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Settings"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.Settings"
                        }
                    }
                }
            }
        },
        "/fyc/sign": {
            "get": {
                "description": "Get a list of signs (all, enabled, or deleted) or a specific sign by ID with optional extra data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Get signs or a specific sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of sign: all, enabled, or deleted (default is 'all')",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of signs or a single sign",
                        "schema": {
                            "$ref": "#/definitions/db.Sign"
                        }
                    },
                    "400": {
                        "description": "Bad request: Invalid sign ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "No sign found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing sign by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Update a sign by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated sign data",
                        "name": "sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Sign"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "sign updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or ID mismatch",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "sign not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update sign",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new sign to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sign"
                ],
                "summary": "Add a new sign",
                "parameters": [
                    {
                        "description": "sign data",
                        "name": "sign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Sign"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "sign created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.Sign"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create a new sign",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft delete a sign by setting the is_deleted flag to true",
                "tags": [
                    "Sign"
                ],
                "summary": "Soft delete a sign",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "sign ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "sign deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid sign ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete sign",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/user": {
            "put": {
                "description": "Update an existing User by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a client credential",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated client credential data",
                        "name": "clientCred",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new User to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Add a new User",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Use by username",
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/fyc/users": {
            "get": {
                "description": "Get a list of users (all, enabled) or a specific user by username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Users or a specific User by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type of user: all or enabled (default is 'all')",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Users or a single User",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.User"
                            }
                        }
                    },
                    "404": {
                        "description": "No user found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/zones": {
            "get": {
                "description": "Get a list of all zones, or a zone by ID if 'id' parameter is provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Get all zones",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include extra information if 'true'",
                        "name": "extra",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of zones or a single zone",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Zone"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing zone by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Update a zone by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Updated zone data",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Zone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Zone"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new zone to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones"
                ],
                "summary": "Add a new zone",
                "parameters": [
                    {
                        "description": "Zone data",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.Zone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.Zone"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a zone by ID",
                "tags": [
                    "Zones"
                ],
                "summary": "Delete a zone",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Zone deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Zone not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/zonesImage": {
            "post": {
                "description": "Add a new zone image to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Add a new zone Image",
                "parameters": [
                    {
                        "description": "Zone image data",
                        "name": "ImageZone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ImageZone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.ImageZone"
                        }
                    }
                }
            }
        },
        "/fyc/zonesImage/{id}": {
            "put": {
                "description": "Update the image data of an existing zone by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Update a zone image by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated zone image data",
                        "name": "Image",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.ImageZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Zone"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a zone image by ID",
                "tags": [
                    "Zones Image"
                ],
                "summary": "Delete a zone image",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Zone image ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Zone image deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Zone image not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/fyc/zonesImages": {
            "get": {
                "description": "Get a list of all zones images",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Zones Image"
                ],
                "summary": "Get all zones images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zone ID to fetch a specific zone's image",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Include extra information if 'yes'",
                        "name": "extra",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "choose the image type Small or Large (small or sm for Small Images / lg or large for Large)",
                        "name": "typeImage",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ImageZone"
                            }
                        }
                    }
                }
            }
        },
        "/getpicture": {
            "get": {
                "security": [
                    {
                        "BearerAuth3rdParty": []
                    }
                ],
                "description": "Get an image using the picture name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Third Party"
                ],
                "summary": "Get a picture by picture name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Picture Name",
                        "name": "picture_name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "small",
                        "description": "Picture Size small is default size 'big or small'",
                        "name": "picture_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/third_party.PictureResponse"
                        }
                    }
                }
            }
        },
        "/getsettings": {
            "get": {
                "security": [
                    {
                        "BearerAuth3rdParty": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Third Party"
                ],
                "summary": "Get Settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Settings"
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "description": "Get an access token using client credentials",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Third Party"
                ],
                "summary": "Get an access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client Secret",
                        "name": "client_secret",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Grant Type",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/third_party.TokenRespose"
                        }
                    }
                }
            }
        },
        "/v2/bays.json": {
            "get": {
                "description": "Get ZONE with PKA SYSTEM",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PKA - API"
                ],
                "summary": "PKA SYSTEM API - Search Car",
                "parameters": [
                    {
                        "type": "string",
                        "description": "visit.plate.text",
                        "name": "visit.plate.text",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/v2/maps/{imagename}": {
            "get": {
                "description": "Retrieve an image from the PKA system by image name.",
                "produces": [
                    "image/jpeg",
                    " image/png"
                ],
                "tags": [
                    "PKA - API"
                ],
                "summary": "PKA SYSTEM API - Search Image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image Name",
                        "name": "imagename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image retrieved successfully.",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "backoffice.CronInfo": {
            "type": "object",
            "properties": {
                "counting_clean_cron": {
                    "type": "integer"
                },
                "fyc_clean_cron": {
                    "type": "integer"
                },
                "is_counting_enabled": {
                    "type": "boolean"
                },
                "is_fyc_enabled": {
                    "type": "boolean"
                }
            }
        },
        "backoffice.GeneralInfo": {
            "type": "object",
            "properties": {
                "carpark_id": {
                    "type": "integer"
                },
                "carpark_name": {
                    "type": "object"
                },
                "default_lang": {
                    "type": "string"
                },
                "pka_image_size": {
                    "type": "string"
                }
            }
        },
        "backoffice.KioskInfo": {
            "type": "object",
            "properties": {
                "TC": {
                    "type": "string"
                },
                "app_logo": {
                    "type": "string"
                },
                "timeout_screenKiosk": {
                    "type": "integer"
                }
            }
        },
        "backoffice.PageLink": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "backoffice.PaginatedResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "payload": {
                    "type": "object",
                    "properties": {
                        "pagination": {
                            "$ref": "#/definitions/backoffice.Pagination"
                        }
                    }
                }
            }
        },
        "backoffice.Pagination": {
            "type": "object",
            "properties": {
                "first_page_url": {
                    "type": "string"
                },
                "last_page_url": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/backoffice.PageLink"
                    }
                },
                "next_page_url": {
                    "type": "string"
                },
                "prev_page_url": {
                    "type": "string"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "backoffice.ResponseData": {
            "type": "object",
            "properties": {
                "Kiosk": {
                    "$ref": "#/definitions/backoffice.KioskInfo"
                },
                "cron": {
                    "$ref": "#/definitions/backoffice.CronInfo"
                },
                "general": {
                    "$ref": "#/definitions/backoffice.GeneralInfo"
                }
            }
        },
        "backoffice.User": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "db.ApiKey": {
            "type": "object",
            "required": [
                "client_id",
                "client_secret",
                "grant_type"
            ],
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "client_name": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "fuzzy_logic": {
                    "type": "boolean"
                },
                "grant_type": {
                    "type": "string"
                }
            }
        },
        "db.Camera": {
            "type": "object",
            "required": [
                "cam_id",
                "cam_ip",
                "cam_name",
                "cam_password",
                "cam_port",
                "cam_type",
                "cam_user",
                "direction",
                "zone_in_id",
                "zone_out_id"
            ],
            "properties": {
                "cam_id": {
                    "type": "integer"
                },
                "cam_ip": {
                    "type": "string"
                },
                "cam_name": {
                    "type": "string"
                },
                "cam_password": {
                    "type": "string"
                },
                "cam_port": {
                    "type": "integer"
                },
                "cam_type": {
                    "type": "string"
                },
                "cam_user": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "zone_in_id": {
                    "type": "integer"
                },
                "zone_out_id": {
                    "type": "integer"
                }
            }
        },
        "db.CarDetail": {
            "type": "object",
            "required": [
                "cam_body",
                "image1",
                "image2"
            ],
            "properties": {
                "cam_body": {
                    "type": "object"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "image1": {
                    "type": "string"
                },
                "image2": {
                    "type": "string"
                }
            }
        },
        "db.ErrorMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "messages": {
                    "type": "object"
                }
            }
        },
        "db.ImageZone": {
            "type": "object",
            "required": [
                "image_l",
                "image_s",
                "language",
                "zone_id"
            ],
            "properties": {
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "image_l": {
                    "type": "string"
                },
                "image_s": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "db.PresentCar": {
            "type": "object",
            "required": [
                "camera_id",
                "car_details_id",
                "confidence",
                "current_zone_id",
                "direction",
                "last_zone_id",
                "lpn",
                "transaction_date"
            ],
            "properties": {
                "camera_id": {
                    "type": "integer"
                },
                "car_details_id": {
                    "type": "integer"
                },
                "confidence": {
                    "type": "integer"
                },
                "current_zone_id": {
                    "type": "integer"
                },
                "direction": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "last_zone_id": {
                    "type": "integer"
                },
                "lpn": {
                    "type": "string"
                },
                "transaction_date": {
                    "type": "string"
                }
            }
        },
        "db.PresentCarHistory": {
            "type": "object",
            "required": [
                "camera_id",
                "car_details_id",
                "confidence",
                "current_zone_id",
                "direction",
                "last_zone_id",
                "lpn",
                "transaction_date"
            ],
            "properties": {
                "camera_id": {
                    "type": "integer"
                },
                "car_details_id": {
                    "type": "integer"
                },
                "confidence": {
                    "type": "integer"
                },
                "current_zone_id": {
                    "type": "integer"
                },
                "direction": {
                    "type": "string"
                },
                "extra": {
                    "type": "object"
                },
                "id": {
                    "type": "integer"
                },
                "last_zone_id": {
                    "type": "integer"
                },
                "lpn": {
                    "type": "string"
                },
                "transaction_date": {
                    "type": "string"
                }
            }
        },
        "db.Settings": {
            "type": "object",
            "required": [
                "app_logo",
                "carpark_id",
                "carpark_name",
                "counting_clean_cron",
                "default_lang",
                "fyc_clean_cron",
                "pka_image_size",
                "timeout_screenKiosk"
            ],
            "properties": {
                "app_logo": {
                    "type": "string"
                },
                "carpark_id": {
                    "type": "integer"
                },
                "carpark_name": {
                    "type": "object"
                },
                "counting_clean_cron": {
                    "type": "integer"
                },
                "default_lang": {
                    "type": "string"
                },
                "fyc_clean_cron": {
                    "type": "integer"
                },
                "is_counting_enabled": {
                    "type": "boolean"
                },
                "is_fyc_enabled": {
                    "type": "boolean"
                },
                "pka_image_size": {
                    "type": "string"
                },
                "tc": {
                    "type": "string"
                },
                "timeout_screenKiosk": {
                    "type": "integer"
                }
            }
        },
        "db.SettingsNoBind": {
            "type": "object",
            "properties": {
                "app_logo": {
                    "type": "string"
                },
                "carpark_id": {
                    "type": "integer"
                },
                "carpark_name": {
                    "type": "object"
                },
                "counting_clean_cron": {
                    "type": "integer"
                },
                "default_lang": {
                    "type": "string"
                },
                "fyc_clean_cron": {
                    "type": "integer"
                },
                "is_counting_enabled": {
                    "type": "boolean"
                },
                "is_fyc_enabled": {
                    "type": "boolean"
                },
                "pka_image_size": {
                    "type": "string"
                },
                "tc": {
                    "type": "string"
                },
                "timeout_screenKiosk": {
                    "type": "integer"
                }
            }
        },
        "db.Sign": {
            "type": "object",
            "required": [
                "sign_id",
                "sign_ip",
                "sign_name",
                "sign_password",
                "sign_port",
                "sign_type",
                "sign_username",
                "zone_id"
            ],
            "properties": {
                "sign_id": {
                    "type": "integer"
                },
                "sign_ip": {
                    "type": "string"
                },
                "sign_name": {
                    "type": "object"
                },
                "sign_password": {
                    "type": "string"
                },
                "sign_port": {
                    "type": "integer"
                },
                "sign_type": {
                    "type": "string"
                },
                "sign_username": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "db.User": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "db.UserAudit": {
            "type": "object",
            "required": [
                "action_date",
                "module",
                "new_value",
                "old_value",
                "user_id"
            ],
            "properties": {
                "action_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "module": {
                    "type": "string"
                },
                "new_value": {
                    "type": "object"
                },
                "old_value": {
                    "type": "object"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "db.Zone": {
            "type": "object",
            "required": [
                "free_capacity",
                "max_capacity",
                "name",
                "zone_id"
            ],
            "properties": {
                "extra": {
                    "type": "object"
                },
                "free_capacity": {
                    "type": "integer"
                },
                "max_capacity": {
                    "type": "integer"
                },
                "name": {
                    "type": "object"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.AddSignModel": {
            "type": "object",
            "properties": {
                "sign_id": {
                    "type": "integer",
                    "example": 101
                },
                "sign_ip": {
                    "type": "string"
                },
                "sign_name": {
                    "$ref": "#/definitions/models.Name"
                },
                "sign_password": {
                    "type": "string"
                },
                "sign_port": {
                    "type": "integer"
                },
                "sign_type": {
                    "type": "string"
                },
                "sign_username": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.AddZoneModel": {
            "type": "object",
            "properties": {
                "free_capacity": {
                    "type": "integer"
                },
                "images": {
                    "$ref": "#/definitions/models.Images"
                },
                "max_capacity": {
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/models.Name"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.ImageModel": {
            "type": "object",
            "properties": {
                "image_l": {
                    "type": "string",
                    "example": ""
                },
                "image_s": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "models.Images": {
            "type": "object",
            "properties": {
                "ar": {
                    "$ref": "#/definitions/models.ImageModel"
                },
                "en": {
                    "$ref": "#/definitions/models.ImageModel"
                }
            }
        },
        "models.Name": {
            "type": "object",
            "properties": {
                "ar": {
                    "type": "string",
                    "example": ""
                },
                "en": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "models.UpdateSignModel": {
            "type": "object",
            "properties": {
                "is_enabled": {
                    "type": "boolean"
                },
                "sign_id": {
                    "type": "integer",
                    "example": 101
                },
                "sign_ip": {
                    "type": "string"
                },
                "sign_name": {
                    "$ref": "#/definitions/models.Name"
                },
                "sign_password": {
                    "type": "string"
                },
                "sign_port": {
                    "type": "integer"
                },
                "sign_type": {
                    "type": "string"
                },
                "sign_username": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.UpdateZoneModel": {
            "type": "object",
            "properties": {
                "free_capacity": {
                    "type": "integer"
                },
                "images": {
                    "$ref": "#/definitions/models.Images"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "max_capacity": {
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/models.Name"
                }
            }
        },
        "models.ZoneDataModel2": {
            "type": "object",
            "properties": {
                "free_capacity": {
                    "type": "integer"
                },
                "images": {
                    "$ref": "#/definitions/models.Images"
                },
                "is_enabled": {
                    "type": "boolean"
                },
                "last_update": {
                    "type": "string"
                },
                "max_capacity": {
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/models.Name"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "models.ZoneNamesModel": {
            "type": "object",
            "properties": {
                "free_capacity": {
                    "type": "integer"
                },
                "max_capacity": {
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/models.Name"
                },
                "zone_id": {
                    "type": "integer"
                }
            }
        },
        "third_party.CarLocation": {
            "type": "object",
            "properties": {
                "license_plate": {
                    "type": "string"
                },
                "picture_name": {
                    "type": "string"
                },
                "spot_id": {
                    "type": "string"
                },
                "zone_name": {
                    "type": "string"
                }
            }
        },
        "third_party.PictureResponse": {
            "type": "object",
            "properties": {
                "picture_data": {
                    "type": "string"
                }
            }
        },
        "third_party.TokenRespose": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "token_type": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth3rdParty": {
            "description": "Authorization token for third-party section (Ensure the token is in this format: Bearer token)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BearerAuthBackOffice": {
            "description": "Authorization token for back-office section (Ensure the token is in this format: Bearer token)",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}